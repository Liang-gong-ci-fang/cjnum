package cjnum.internal.asm.f32

import std.unittest.*
import std.unittest.testmacro.*
import cjnum.internal.math32.*

// TODO missing @Test

class sgemvCase {
    sgemvCase(
        let m: Int64,
        let n: Int64,
        let A: Array<Float32>,
        let x: Array<Float32>,
        let y: Array<Float32>,
        let NoTrans: Array<sgemvSubCase>,
        let Trans: Array<sgemvSubCase>
    ) {}
}

class sgemvSubCase {
    sgemvSubCase(
        let alpha: Float32,
        let beta: Float32,
        let want: Array<Float32>,
        let wantRevX: Array<Float32>,
        let wantRevY: Array<Float32>,
        let wantRevXY: Array<Float32>
    ) {}
}

let sgemvCases = [
    sgemvCase(
        1,
        1,
        [4.1],
        [2.2],
        [6.8],
        [
            sgemvSubCase(0.0, 0.0, [0.0], [0.0], [0.0],
                [0.0]),
            sgemvSubCase(0.0, 1.0, [6.8], [6.8], [6.8],
                [6.8]),
            sgemvSubCase(1.0, 0.0, [9.02], [9.02], [9.02],
                [9.02]),
            sgemvSubCase(8.0, -6.0, [31.36], [31.36], [31.36],
                [31.36])
        ],
        [
            sgemvSubCase(0.0, 0.0, [0.0], [0.0], [0.0],
                [0.0]),
            sgemvSubCase(0.0, 1.0, [2.2], [2.2], [2.2],
                [2.2]),
            sgemvSubCase(1.0, 0.0, [27.88], [27.88], [27.88],
                [27.88]),
            sgemvSubCase(8.0, -6.0, [209.84], [209.84], [209.84],
                [209.84])
        ]
    ),
    sgemvCase(
        3,
        2,
        [4.67, 2.75, 0.48, 1.21, 2.28, 2.82],
        [3.38, 3.0],
        [2.8, 1.71, 2.64],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0], [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [2.8, 1.71, 2.64], [2.8, 1.71, 2.64],
                [2.8, 1.71, 2.64], [2.8, 1.71, 2.64]),
            sgemvSubCase(1.0, 0.0, [24.0346, 5.2524, 16.1664],
                [23.305, 5.5298, 16.3716], [16.1664, 5.2524, 24.0346],
                [16.3716, 5.5298, 23.305]),
            sgemvSubCase(8.0, -6.0, [175.4768, 31.7592, 113.4912],
                [169.64, 33.9784, 115.1328], [112.5312, 31.7592, 176.4368],
                [114.1728, 33.9784, 170.6])
        ],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0], [0.0, 0.0], [0.0, 0.0], [0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [3.38, 3.0], [3.38, 3.0],
                [3.38, 3.0], [3.38, 3.0]),
            sgemvSubCase(1.0, 0.0, [19.916, 17.2139], [19.5336, 17.2251],
                [17.2139, 19.916], [17.2251, 19.5336]),
            sgemvSubCase(8.0, -6.0, [139.048, 119.7112], [135.9888, 119.8008],
                [117.4312, 141.328], [117.5208, 138.2688])
        ]
    ),
    sgemvCase(
        3,
        3,
        [4.38, 4.4, 4.26, 4.18, 0.56, 2.57, 2.59, 2.07, 0.46],
        [4.82, 1.82, 1.12],
        [0.24, 1.41, 3.45],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0], [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [0.24, 1.41, 3.45], [0.24, 1.41, 3.45],
                [0.24, 1.41, 3.45], [0.24, 1.41, 3.45]),
            sgemvSubCase(1.0, 0.0, [33.8908, 24.0452, 16.7664],
                [33.4468, 18.0882, 8.8854], [16.7664, 24.0452, 33.8908],
                [8.8854, 18.0882, 33.4468]),
            sgemvSubCase(8.0, -6.0, [269.6864, 183.9016, 113.4312],
                [266.1344, 136.2456, 50.3832], [132.6912, 183.9016, 250.4264],
                [69.6432, 136.2456, 246.8744])
        ],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0], [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [4.82, 1.82, 1.12], [4.82, 1.82, 1.12],
                [4.82, 1.82, 1.12], [4.82, 1.82, 1.12]),
            sgemvSubCase(1.0, 0.0, [15.8805, 8.9871, 6.2331],
                [21.6264, 16.4664, 18.4311], [6.2331, 8.9871, 15.8805],
                [18.4311, 16.4664, 21.6264]),
            sgemvSubCase(8.0, -6.0, [98.124, 60.9768, 43.1448],
                [144.0912, 120.8112, 140.7288], [20.9448, 60.9768, 120.324],
                [118.5288, 120.8112, 166.2912])
        ]
    ),
    sgemvCase(
        5,
        3,
        [4.1, 6.2, 8.1, 9.6, 3.5, 9.1, 10.0, 7.0, 3.0, 1.0, 1.0, 2.0, 9.0, 2.0, 5.0],
        [1.0, 2.0, 3.0],
        [7.0, 8.0, 9.0, 10.0, 11.0],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0,
                0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [7.0, 8.0, 9.0, 10.0, 11.0],
                [7.0, 8.0, 9.0, 10.0, 11.0], [7.0, 8.0, 9.0, 10.0, 11.0],
                [7.0, 8.0, 9.0, 10.0, 11.0]),
            sgemvSubCase(1.0, 0.0, [40.8, 43.9, 33.0, 9.0, 28.0],
                [32.8, 44.9, 47.0, 7.0, 36.0], [28.0, 9.0, 33.0, 43.9, 40.8],
                [36.0, 7.0, 47.0, 44.9, 32.8]),
            sgemvSubCase(8.0, -6.0, [284.4, 303.2, 210.0, 12.0, 158.0],
                [220.4, 311.2, 322.0, -4.0, 222.0], [182.0, 24.0, 210.0, 291.2, 260.4], 
                [246.0, 8.0, 322.0, 299.2, 196.4])
        ],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0], [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [1.0, 2.0, 3.0], [1.0, 2.0, 3.0],
                [1.0, 2.0, 3.0], [1.0, 2.0, 3.0]),
            sgemvSubCase(1.0, 0.0, [304.5, 166.4, 231.5], [302.1, 188.2, 258.1],
                [231.5, 166.4, 304.5], [258.1, 188.2, 302.1]),
            sgemvSubCase(8.0, -6.0, [2430.0, 1319.2, 1834.0], [2410.8, 1493.6, 2046.8], 
            [1846.0, 1319.2, 2418.0], [2058.8, 1493.6, 2398.8])
        ]
    ),
    sgemvCase(
        3,
        5,
        [1.4, 2.34, 3.96, 0.96, 2.3, 3.43, 0.62, 1.09, 0.2, 3.56, 1.15, 0.58, 3.8, 1.16, 0.01],
        [2.34, 2.82, 4.73, 0.22, 3.91],
        [2.46, 2.22, 4.75],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0], [0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0], [0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [2.46, 2.22, 4.75], [2.46, 2.22, 4.75],
                [2.46, 2.22, 4.75], [2.46, 2.22, 4.75]),
            sgemvSubCase(1.0, 0.0, [37.8098, 28.8939, 22.5949],
                [32.8088, 27.5978, 25.8927], [22.5949, 28.8939, 37.8098],
                [25.8927, 27.5978, 32.8088]),
            sgemvSubCase(8.0, -6.0, [287.7184, 217.8312, 152.2592],
                [247.7104, 207.4624, 178.6416], [165.9992, 217.8312, 273.9784],
                [192.3816, 207.4624, 233.9704])
        ],
            [
                sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0,
                    0.0], [0.0, 0.0, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, 0.0, 0.0]),
                sgemvSubCase(0.0, 1.0, [2.34, 2.82, 4.73, 0.22, 3.91],
                    [2.34, 2.82, 4.73, 0.22, 3.91], [2.34, 2.82, 4.73, 0.22, 3.91],
                    [2.34, 2.82, 4.73, 0.22, 3.91]),
                sgemvSubCase(1.0, 0.0, [16.5211, 9.8878, 30.2114, 8.3156, 13.6087],
                    [17.0936, 13.9182, 30.5778, 7.8576, 18.8528],
                    [13.6087, 8.3156, 30.2114, 9.8878, 16.5211],
                    [18.8528, 7.8576, 30.5778, 13.9182, 17.0936]),
                sgemvSubCase(8.0, -6.0, [118.1288, 62.1824, 213.3112, 65.2048, 85.4096],
                    [122.7088, 94.4256, 216.2424, 61.5408, 127.3624],
                    [94.8296, 49.6048, 213.3112, 77.7824, 108.7088],
                    [136.7824, 45.9408, 216.2424, 110.0256, 113.2888])
            ]
        ),
    sgemvCase(
        7,
        7,
        [0.9, 2.6, 0.5, 1.8, 2.3, 0.6, 0.2, 1.6, 0.6, 1.3, 2.1, 1.4, 0.4, 0.8, 2.9, 0.9, 2.3, 2.5, 1.4, 1.8, 1.6,
                2.6, 2.8, 2.1, 0.3, nan, 2.2, 1.3, 0.2, 2.2, 1.8, 1.8, 2.1, 1.3, 1.4, 1.7, 1.4, 2.3, 2.0, 1.0, 0.0, 1.4,
                2.1, 1.9, 0.8, 2.9, 1.3, 0.3, 1.3],
        [0.4, 2.8, 3.5, 0.3, 0.6, 2.5, 3.1],
        [3.2, 4.4, 5.0, 4.3, 4.1, 1.4, 0.2],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0, nan, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, nan, 0.0, 0.0, 0.0], [0.0, 0.0, 0.0, nan, 0.0, 0.0,
                    0.0], [0.0, 0.0, 0.0, nan, 0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [3.2, 4.4, 5.0, nan, 4.1, 1.4, 0.2],
                [3.2, 4.4, 5.0, nan, 4.1, 1.4, 0.2],[3.2, 4.4, 5.0, nan, 4.1, 1.4,
                    0.2], [3.2, 4.4, 5.0, nan, 4.1, 1.4, 0.2]),
            sgemvSubCase(1.0, 0.0, [13.43, 11.82, 22.78, nan, 21.93, 18.19, 15.39],
                [19.94, 14.21, 23.95, nan, 19.29, 14.81, 18.52],
                [15.39, 18.19, 21.93, nan, 22.78, 11.82, 13.43],
                [18.52, 14.81, 19.29, nan, 23.95, 14.21, 19.94]),
            sgemvSubCase(8.0, -6.0, [88.24, 68.16, 152.24, nan, 150.84, 137.12, 121.92],
                [140.32, 87.28, 161.6, nan, 129.72, 110.08, 146.96],
                [103.92, 119.12, 145.44, nan, 157.64, 86.16, 106.24],
                [128.96, 92.08, 124.32, nan, 167.0, 105.28, 158.32])
        ],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0, 0.0, nan, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, nan, 0.0, 0.0], [0.0, 0.0, nan, 0.0, 0.0, 0.0,
                    0.0], [0.0, 0.0, nan, 0.0, 0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [0.4, 2.8, 3.5, 0.3, nan, 2.5, 3.1],
                [0.4, 2.8, 3.5, 0.3, nan, 2.5, 3.1], [0.4, 2.8, nan, 0.3, 0.6, 2.5,
                    3.1], [0.4, 2.8, nan, 0.3, 0.6, 2.5, 3.1]),
            sgemvSubCase(1.0, 0.0, [39.22, 38.86, 38.61, 39.55, nan, 27.53, 25.71],
                [40.69, 40.33, 42.06, 41.92, nan, 24.98, 30.63],
                [25.71, 27.53, nan, 39.55, 38.61, 38.86, 39.22],
                [30.63, 24.98, nan, 41.92, 42.06, 40.33, 40.69]),
            sgemvSubCase(8.0, -6.0, [311.36, 294.08, 287.88, 314.6, nan, 205.24, 187.08],
                [323.12, 305.84, 315.48, 333.56, nan, 184.84, 226.44],
                [203.28, 203.44, nan, 314.6, 305.28, 295.88, 295.16],
                [242.64, 183.04, nan, 333.56, 332.88, 307.64, 306.92])
        ]
    ),
    sgemvCase(
        11,
        11,
        [0.4, 3.0, 2.5, 2.0, 0.4, 2.0, 2.0, 1.0, 0.1, 0.3, 2.0, 1.7, 0.7, 2.6, 1.6, 0.5, 2.4, 3.0, 0.9, 0.1, 2.8,
            1.3, 1.1, 2.2, 1.5, 0.8, 2.9, 0.4, 0.5, 1.7, 0.8, 2.6, 0.7, 2.2, 1.7, 0.8, 2.9, 0.7, 0.7, 1.7, 1.8, 1.9,
            2.4, 1.9, 0.3, 0.5, 1.6, 1.5, 1.5, 2.4, 1.7, 1.2, 1.9, 2.8, 1.2, 1.4, 2.2, 1.7, 1.4, 2.7, 1.4, 0.9, 1.8,
            0.5, 1.2, 1.9, 0.8, 2.3, 1.7, 1.3, 2.0, 2.8, 2.6, 0.4, 2.5, 1.3, 0.5, 2.4, 2.8, 1.1, 0.2, 0.4, 2.8, 0.5,
            0.5, 0.0, 2.8, 1.9, 2.3, 1.8, 2.3, 1.7, 1.1, 0.1, 1.4, 1.2, 1.9, 0.5, 0.6, 0.6, 2.4, 1.2, 0.3, 1.4, 1.3,
            2.5, 2.6, 0.0, 1.3, 2.6, 0.7, 1.5, 0.2, 1.4, 1.1, 1.8, 0.2, 1.0, 1.0, 0.6, 1.2],
        [2.5, 1.2, 0.8, 2.9, 3.4, 1.8, 4.6, 3.3, 3.8, 0.9, 1.1],
        [3.8, 3.4, 1.6, 4.8, 4.3, 0.5, 2.0, 2.5, 1.5, 2.8, 3.9],
        [
            sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
            sgemvSubCase(0.0, 1.0, [3.8, 3.4, 1.6, 4.8, 4.3, 0.5, 2.0, 2.5, 1.5, 2.8, 3.9],
                [3.8, 3.4, 1.6, 4.8, 4.3, 0.5, 2.0, 2.5, 1.5, 2.8, 3.9],
                [3.8, 3.4, 1.6, 4.8, 4.3, 0.5, 2.0, 2.5, 1.5, 2.8, 3.9],
                [3.8, 3.4, 1.6, 4.8, 4.3, 0.5, 2.0, 2.5, 1.5, 2.8, 3.9]),
            sgemvSubCase(1.0, 0.0,
                [32.71, 38.93, 33.55, 45.46, 39.24, 38.41, 46.23, 25.78, 37.33, 37.42, 24.63],
                [39.82, 43.78, 37.73, 41.19, 40.17, 44.41, 42.75, 28.14, 35.6, 41.25, 23.9],
                [24.63, 37.42, 37.33, 25.78, 46.23, 38.41, 39.24, 45.46, 33.55, 38.93, 32.71],
                [23.9, 41.25, 35.6, 28.14, 42.75, 44.41, 40.17, 41.19, 37.73, 43.78, 39.82]),
            sgemvSubCase(8.0, -6.0,
                [238.88, 291.04, 258.8, 334.88, 288.12, 304.28, 357.84, 191.24, 289.64, 282.56,
                    173.64],
                [295.76, 329.84, 292.24, 300.72, 295.56, 352.28, 330.0, 210.12, 275.8, 313.2, 167.8],
                [174.24, 278.96, 289.04, 177.44, 344.04, 304.28, 301.92, 348.68, 259.4, 294.64,
                    238.28],
                [168.4, 309.6, 275.2, 196.32, 316.2, 352.28, 309.36, 314.52, 292.84, 333.44, 295.16]
            )
        ],
            [
                sgemvSubCase(0.0, 0.0, [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],
                    [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]),
                sgemvSubCase(0.0, 1.0, [2.5, 1.2, 0.8, 2.9, 3.4, 1.8, 4.6, 3.3, 3.8, 0.9, 1.1],
                    [2.5, 1.2, 0.8, 2.9, 3.4, 1.8, 4.6, 3.3, 3.8, 0.9, 1.1],
                    [2.5, 1.2, 0.8, 2.9, 3.4, 1.8, 4.6, 3.3, 3.8, 0.9, 1.1],
                    [2.5, 1.2, 0.8, 2.9, 3.4, 1.8, 4.6, 3.3, 3.8, 0.9, 1.1]),
                sgemvSubCase(1.0, 0.0,
                    [37.07, 55.58, 46.05, 47.34, 33.88, 54.19, 50.85, 39.31, 31.29, 55.31, 46.98],
                    [38.11, 63.38, 46.44, 40.04, 34.63, 59.27, 50.13, 35.45, 28.26, 51.64, 46.22],
                    [46.98, 55.31, 31.29, 39.31, 50.85, 54.19, 33.88, 47.34, 46.05, 55.58, 37.07],
                    [46.22, 51.64, 28.26, 35.45, 50.13, 59.27, 34.63, 40.04, 46.44, 63.38, 38.11]),
                sgemvSubCase(8.0, -6.0,
                    [281.56, 437.44, 363.6, 361.32, 250.64, 422.72, 379.2, 294.68, 227.52, 437.08, 369.24], 
                    [289.88, 499.84, 366.72, 302.92, 256.64, 463.36, 373.44, 263.8, 203.28, 407.72,
                        363.16],
                    [360.84, 435.28, 245.52, 297.08, 386.4, 422.72, 243.44, 358.92, 345.6, 439.24, 289.96], 
                    [354.76, 405.92, 221.28, 266.2, 380.64, 463.36, 249.44, 300.52, 348.72, 501.64,
                        298.28])
            ]
        )
]

@Test
public func testGemv() {
    for (test in sgemvCases) {
        for (i in 0..test.NoTrans.size) {
            let cas = test.NoTrans[i]
            @Expect(sgemvcomp(test, false, cas, i))
        }
        for (i in 0..test.Trans.size) {
            let cas = test.Trans[i]
            @Expect(sgemvcomp(test, true, cas, i))
        }
    }
}

func sgemvcomp(test:sgemvCase, trans: Bool, cas: sgemvSubCase, i: Int64): Bool {
    const tol: Float32 = 1e-6
    const xGdVal: Float32 = 0.5
    const yGdVal: Float32 = 1.5
    const aGdVal: Float32 = 10.0
    const gdLn = 4

    var x_ = test.x
    var y_ = test.y

    if (trans) {
        (x_,y_) = (y_,x_)
    }

    let name = "Test ${i} (${test.m}x${test.n}) t:${trans} (a:${cas.alpha},b:${cas.beta})"

    let xg = guardVector(x_, xGdVal, gdLn)
    let yg = guardVector(y_, yGdVal, gdLn)

    let x = xg[gdLn..xg.size - gdLn]
    let y = yg[gdLn..yg.size - gdLn]

    let ag = guardVector(test.A, aGdVal, gdLn)
    let a = ag[gdLn..ag.size - gdLn]

    let lda = test.n
    if (trans) {
        gemvT(test.m, test.n, cas.alpha, a, lda, x, 1, cas.beta, y, 1)
    } else {
        germN(test.m, test.n, cas.alpha, a, lda, x, 1, cas.beta, y, 1)
    }

    for (i in 0..cas.want.size) {
        if (!sameApprox(y[i], cas.want[i], tol)) {
            throw Exception("${name} i: ${i}, y[i]: ${y[i]}, cas.want[i]: ${cas.want[i]}, trans: ${trans}")
        }
    }

    if (!isValidGuard(xg, xGdVal, gdLn)) {
        throw Exception(name)
    }
    if (!isValidGuard(yg, yGdVal, gdLn)) {
        throw Exception(name)
    }
    if (!isValidGuard(ag, aGdVal,gdLn)) {
        throw Exception(name)
    }
    if (!equalStrided(x_, x, 1)) {
        throw Exception(name)
    }
    if (!equalStrided(test.A, a, 1)) {
        throw Exception(name)
    }

    for (inc in newIncSet(-1, 1, 2, 3, 90)) {
        var want = cas.want
        var incY = inc.y

        if (inc.x < 0 && inc.y < 0) {
            want = cas.wantRevXY
            incY = -inc.y
        } else if (inc.x < 0) {
            want = cas.wantRevX
        } else if (inc.y < 0) {
            want = cas.wantRevY
            incY = -inc.y
        }
        
        let xg = guardIncVector(x_, xGdVal, inc.x, gdLn)
        let yg = guardIncVector(y_, yGdVal, inc.y, gdLn)

        let x = xg[gdLn..xg.size-gdLn]
        let y = yg[gdLn..yg.size-gdLn]

        let ag = guardVector(test.A, aGdVal, gdLn)
        let a = ag[gdLn..ag.size-gdLn]

        if (trans) {
            gemvT(test.m, test.n, cas.alpha, a, lda, x, inc.x, cas.beta,y, inc.y)
        } else {
            germN(test.m, test.n, cas.alpha, a, lda, x, inc.x, cas.beta, y, inc.y)
        }

        for (i in 0..want.size) {
            if (!sameApprox(y[i*incY], want[i], tol)) {
                throw Exception(name)
            }
        }

        checkValidIncGuard(xg, xGdVal,inc.x,gdLn)
        checkValidIncGuard(yg, yGdVal,inc.y, gdLn)

        if (!isValidGuard(ag,aGdVal,gdLn)) {
            throw Exception(name)
        }
        if (!equalStrided(x_, x, inc.x)) {
            throw Exception(name)
        }
        if (!equalStrided(test.A, a, 1)) {
            throw Exception(name)
        }
    }
    return true
}

func equalStrided(ref:Array<Float32>, x:Array<Float32>, inc:Int64): Bool {
	let inc_ = if (inc < 0) {
            -inc
        } else {
            inc
        }
	for (i in 0..ref.size) {
		if (!scalarSame(x[i*inc], ref[i])) {
			return false
		}
	}
	return true
}

func scalarSame(a:Float32, b:Float32):Bool {
	return a == b || (nIsNaN(a) && nIsNaN(b))
}