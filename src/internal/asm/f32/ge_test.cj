package cjnum.internal.asm.f32

import std.unittest.*
import std.unittest.testmacro.*

class gerStruct {
    gerStruct(
        let x: Array<Float32>,
        let y: Array<Float32>,
        let a: Array<Float32>,
        let want: Array<Float32>
    ) {}
}

let gerTest = [
    gerStruct([2.0], [4.4], [10.0], [18.8]),
    gerStruct([-2.0, -3.0, 0.0], [-1.1, 5.0],
        [1.3, 2.4, 2.6, 2.8, -1.3, -4.3], [3.5, -7.6, 5.9, -12.2, -1.3, -4.3]),
    gerStruct([-2.0, 7.0, 12.0], [-1.1, 0.0, 6.0],
        [1.3, 2.4, 3.5, 2.6, 2.8, 3.3, -1.3, -4.3, -9.7],
        [3.5, 2.4, -8.5, -5.1, 2.8, 45.3, -14.5, -4.3, 62.3]),
    gerStruct([-2.0, -3.0, 0.0, 1.0, 2.0], [-1.1, 5.0, 0.0],
        [1.3, 2.4, 3.5, 2.6, 2.8, 3.3, -1.3, -4.3, -9.7, 8.0, 9.0, -10.0, -12.0, -14.0, -6.0],
        [3.5, -7.6, 3.5, 5.9, -12.2, 3.3, -1.3, -4.3, -9.7, 6.9, 14.0, -10.0, -14.2, -4.0, -6.0]),
    gerStruct([-2.0, -3.0, 0.0], [-1.1, 5.0, 0.0, 9.0, 19.0, 22.0],
        [1.3, 2.4, 3.5, 4.8, 1.11, -9.0, 2.6, 2.8, 3.3, -3.4, 6.2, -8.7, -1.3, -4.3, -9.7, -3.1, 8.9, 8.9]
        , [3.5, -7.6, 3.5, -13.2, -36.89, -53.0, 5.9, -12.2, 3.3, -30.4, -50.8, -74.7, -1.3, -4.3, -9.7,
            -3.1, 8.9, 8.9]),
    gerStruct([-2.0, 0.0, 2.0, 0.0, 7.0], [-1.1, 8.0, 7.0, 3.0, 5.0],
        
            [1.3, 2.4, 3.5, 2.2, 8.3, 2.6, 2.8, 3.3, 4.4, -1.5, -1.3, -4.3, -9.7, -8.8, 6.2, 8.0, .09, -10.0, -11.0,
                12.0, -12.0, -14.0, -6.0, -2.0, 4.0],
        
            [3.5, -13.6, -10.5, -3.8, -1.7, 2.6, 2.8, 3.3, 4.4, -1.5, -3.5, 11.7, 4.3, -2.8, 16.2, 8.0, 9.0, -10.0,
                -11.0, 12.0, -19.700000000000003, 42.0, 43.0, 19.0, 39.0]),
    gerStruct(
        [-2.0, 8.0, 9.0, -3.0, -1.2, 5.0, 4.5],
        [-1.1, nan, 19.0, 11.0, -9.22, 7.0, 3.3],
            [1.3, 2.4, 3.5, 4.8, 1.11, -9.0, 2.2, 2.6, 2.8, 3.3, -3.4, 6.2, -8.7, 5.1, -1.3, -4.3, -9.7, -3.1, 8.9, 8.9,
                8.0, 5.0, -2.5, 1.8, -3.6, 2.8, 4.9, 7.0, -1.3, -4.3, -9.7, -3.1, 8.9, 8.9, 8.0, 2.6, 2.8, 3.3, -3.4,
                6.2, -8.7, 5.1, 1.3, 2.4, 3.5, 4.8, 1.11, -9.0, 2.2],
            [3.5, nan, -34.5, -17.2, 19.55, -23.0, -4.4, -6.2, nan, 155.3, 84.6, -67.56, 47.3, 31.5, -11.2, nan, 161.3,
                95.9, -74.08, 71.9, 37.7, 8.3, nan, -55.2, -36.6, 30.46, -16.1, -2.9, 0.02, nan, -32.5, -16.3, 19.964,
                0.5, 4.04, -2.9, nan, 98.3, 51.6, -39.9, 26.3, 21.6, -3.65, nan, 89.0, 54.3, -40.38, 22.5, 17.05]
    ),
    gerStruct(
        [6.2, -5.0, 88.68, 43.4, -30.5, -40.2, 19.9, 3.0, 19.9, -40.2, -30.5, 43.4, 88.68, -5.0, 6.2],
        [1.5, 21.7, -28.7, -11.9, 18.1, 3.1, 21.0, 8.0, 21.0, 3.1, 18.1, -11.9, -28.7, 21.7, 1.5],
            [-20.5, 17.1, -8.4, -23.8, 3.9, 7.7, 6.25, 2.9, -0.29, 25.6, -9.4, 36.5, 9.7, 2.3, 4.1, -34.1, 10.3, 4.5,
                -42.05, 9.4, 4.0, 19.2, 9.8, -32.7, 4.1, 4.4, -22.5, -7.8, 3.6, -24.5, 21.7, 8.6, -13.82, 3.05, -2.29,
                39.4, -40.0, 7.9, -2.5, -7.7, 18.1, -25.5, -18.5, 43.2, 2.1, -20.5, 17.1, -8.4, -23.8, 3.9, 7.7, 6.25, 2.9,
                -0.29, 25.6, -9.4, 36.5, 9.7, 2.3, 4.1, -34.1, 10.3, 4.5, -42.05, 9.4, 4.0, 19.2, 9.8, -32.7, 4.1, 4.4,
                -22.5, -7.8, 3.6, -24.5, 21.7, 8.6, -13.82, 3.05, -2.29, 39.4, -40.0, 7.9, -2.5, -7.7, 18.1, -25.5, -18.5,
                43.2, 2.1, 21.7, 8.6, -13.82, 3.05, -2.29, 39.4, -40.0, 7.9, -2.5, -7.7, 18.1, -25.5, -18.5, 43.2, 2.1,
                -34.1, 10.3, 4.5, -42.05, 9.4, 4.0, 19.2, 9.8, -32.7, 4.1, 4.4, -22.5, -7.8, 3.6, -24.5, -20.5, 17.1, -8.4,
                -23.8, 3.9, 7.7, 6.25, 2.9, -0.29, 25.6, -9.4, 36.5, 9.7, 2.3, 4.1, 21.7, 8.6, -13.82, 3.05, -2.29, 39.4,
                -40.0, 7.9, -2.5, -7.7, 18.1, -25.5, -18.5, 43.2, 2.1, -34.1, 10.3, 4.5, -42.05, 9.4, 4.0, 19.2, 9.8, -32.7,
                4.1, 4.4, -22.5, -7.8, 3.6, -24.5, -20.5, 17.1, -8.4, -23.8, 3.9, 7.7, 6.25, 2.9, -0.29, 25.6, -9.4,
                36.5, 9.7, 2.3, 4.1, -20.5, 17.1, -8.4, -23.8, 3.9, 7.7, 6.25, 2.9, -0.29, 25.6, -9.4, 36.5, 9.7, 2.3,
                4.1, 21.7, 8.6, -13.82, 3.05, -2.29, 39.4, -40.0, 7.9, -2.5, -7.7, 18.1, -25.5, -18.5, 43.2, 2.1, -34.1,
                10.3, 4.5, -42.05, 9.4, 4.0, 19.2, 9.8, -32.7, 4.1, 4.4, -22.5, -7.8, 3.6, -24.5],
            [-11.200001, 151.64, -186.34, -97.58, 116.12, 26.919998, 136.45, 52.5, 129.91, 44.82, 102.82, -37.28,
                -168.24, 136.84, 13.4, -41.6, -98.2, 148.0, 17.45, -81.1, -11.5, -85.8, -30.2, -137.7, -11.4, -86.1, 37.0,
                135.7, -104.9, -32.0, 154.72, 1932.956, -2558.936, -1052.242, 1602.818, 314.30798, 1822.28, 717.34,
                1859.78, 267.20798, 1623.208, -1080.792, -2563.616, 1967.556, 135.12001, 44.600006, 958.88007,
                -1253.9801, -540.26, 789.44006, 142.23999, 917.65, 350.1, 911.11005, 160.14, 776.14, -479.96002,
                -1235.8801, 944.0801, 69.200005, -79.85, -651.55005, 879.85004, 320.9, -542.64996, -90.549995, -621.3,
                -234.2, -673.2, -90.45, -547.64996, 340.44998, 867.55005, -658.25006, -70.25, -38.600002, -863.74005,
                1139.9202, 481.43, -729.91003, -85.21999, -884.2, -313.7, -846.7, -132.31999, -709.5201, 452.88,
                1135.2401, -829.14, -58.200005, 51.55, 440.43002, -584.95, -233.75998, 357.9, 101.09, 377.9, 167.09999,
                415.4, 53.989998, 378.29, -262.31, -589.63, 475.03003, 31.949999, -29.599998, 75.40001, -81.600006,
                -77.75, 63.700005, 13.299999, 82.2, 33.8, 30.3, 13.4, 58.700005, -58.199997, -93.90001, 68.700005, -20.0,
                9.349998, 448.93002, -579.53, -260.61, 364.09, 69.39, 424.15, 162.09999, 417.61, 87.29, 350.79,
                -200.30998, -561.43, 434.13, 33.949997, -38.600002, -863.74005, 1139.9202, 481.43, -729.91003, -85.21999,
                -884.2, -313.7, -846.7, -132.31999, -709.5201, 452.88, 1135.2401, -829.14, -58.200005, -79.85,
                -651.55005, 879.85004, 320.9, -542.64996, -90.549995, -621.3, -234.2, -673.2, -90.45, -547.64996,
                340.44998, 867.55005, -658.25006, -70.25, 44.600006, 958.88007, -1253.9801, -540.26, 789.44006,
                142.23999, 917.65, 350.1, 911.11005, 160.14, 776.14, -479.96002, -1235.8801, 944.0801, 69.200005,
                112.520004, 1941.456, -2553.5159, -1079.092, 1609.008, 282.608, 1868.53, 712.34, 1861.99, 300.508,
                1595.708, -1018.792, -2535.416, 1926.6561, 137.12001, 14.200001, -99.9, 129.68, 62.55, -92.79, 23.900002,
                -145.0, -32.1, -107.5, -23.2, -72.4, 34.0, 125.0, -65.3, -5.4, -24.8, 144.84, -173.44, -115.83, 121.62, 23.22,
                149.4, 59.399998, 97.5, 23.32, 116.62, -96.28, -185.74, 138.14, -15.200001]
    )
]

@Test
public func testGer() {
    const tol: Float32 = 1e-6
    const xGdVal: Float32 = -0.5
    const yGdVal: Float32 = 1.5
    const aGdVal: Float32 = 10.0
    const gdLn = 4

    for (i in 0..gerTest.size) {
        let m = gerTest[i].x.size
        let n = gerTest[i].y.size

        for (align in align2) {
            let xgLn = gdLn + align.x
            let ygLn = gdLn + align.y
            let agLn = gdLn + align.x ^ align.y

            let xg = guardVector(gerTest[i].x, xGdVal, xgLn)
            let yg = guardVector(gerTest[i].y, yGdVal, ygLn)

            let x = xg[xgLn..xg.size - xgLn]
            let y = yg[ygLn..yg.size - ygLn]

            let ag = guardVector(gerTest[i].a, aGdVal, agLn)
            let a = ag[agLn..ag.size - agLn]

            ger(m, n, 1.0, x, 1, y, 1, a, n)
            for (j in 0..gerTest[i].want.size) {
                @Expect(sameApprox(a[i], gerTest[i].want[j], tol))
                return
            }

            @Expect(isValidGuard(xg, xGdVal, xgLn))
            @Expect(isValidGuard(yg, yGdVal, ygLn))
            @Expect(isValidGuard(ag, aGdVal, agLn))

            @Expect(sameStrided(gerTest[i].y, y, 1))
        }

        for (inc in newIncSet(1, 2)) {
            let xg = guardIncVector(gerTest[i].x, xGdVal, inc.x, gdLn)
            let yg = guardIncVector(gerTest[i].y, yGdVal, inc.y, gdLn)

            let x = xg[gdLn..xg.size - gdLn]
            let y = yg[gdLn..yg.size - gdLn]

            let ag = guardVector(gerTest[i].a, aGdVal, gdLn)
            let a = ag[gdLn..ag.size - gdLn]
            let alpha: Float32 = 3.5
            ger(m, n, alpha, x, inc.x, y, inc.y, a, n)
            for (i in 0..gerTest[i].want.size) {
                let want = alpha * gerTest[i].x[i/n] * gerTest[i].y[i%n] + gerTest[i].a[i]
                @Expect(sameApprox(a[i], want, tol))
            }
            checkValidIncGuard(xg, xGdVal, inc.x, gdLn)
            checkValidIncGuard(yg, yGdVal, inc.y, gdLn)

            @Expect(isValidGuard(ag, aGdVal, gdLn))
            @Expect(sameStrided(gerTest[i].x, x, inc.x))
            @Expect(sameStrided(gerTest[i].y, y, inc.y))

        }
    }
}
