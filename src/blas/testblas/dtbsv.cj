package cjnum.blas.testblas

import cjnum.blas.*
import cjnum.floats.*

class dtbsvTestStruct {
    dtbsvTestStruct(
        let ul!: Uplo,
        let tA!: Transpose,
        let d!: Diag,
        let n!: Int64,
        let k!: Int64,
        let a!: Array<Array<Float64>>,
        let x!: Array<Float64>,
        let incX!: Int64,
        let ans!: Array<Float64>
    ) {}
}

public func dtbsvTest(nFloat64: NFloat64): Bool {
    let tests = [
        dtbsvTestStruct(
            ul: Upper,
            tA: NoTrans,
            d: NonUnitDiag,
            n: 5,
            k: 1,
            a: [
                [1.0, 3.0, 0.0, 0.0, 0.0],
                [0.0, 6.0, 7.0, 0.0, 0.0],
                [0.0, 0.0, 2.0, 1.0, 0.0],
                [0.0, 0.0, 0.0, 12.0, 3.0],
                [0.0, 0.0, 0.0, 0.0, -1.0]
            ],
            x: [1.0, 2.0, 3.0, 4.0, 5.0],
            incX: 1,
            ans: [2.479166666666667, -0.493055555555556, 0.708333333333333, 1.583333333333333, -5.000000000000000]
        ),
        dtbsvTestStruct(
            ul: Upper,
            tA: NoTrans,
            d: NonUnitDiag,
            n: 5,
            k: 2,
            a: [
                [1.0, 3.0, 5.0, 0.0, 0.0],
                [0.0, 6.0, 7.0, 5.0, 0.0],
                [0.0, 0.0, 2.0, 1.0, 5.0],
                [0.0, 0.0, 0.0, 12.0, 3.0],
                [0.0, 0.0, 0.0, 0.0, -1.0]
            ],
            x: [1.0, 2.0, 3.0, 4.0, 5.0],
            incX: 1,
            ans: [-15.854166666666664, -16.395833333333336, 13.208333333333334, 1.583333333333333, -5.000000000000000]
        ),
        dtbsvTestStruct(
            ul: Upper,
            tA: NoTrans,
            d: NonUnitDiag,
            n: 5,
            k: 1,
            a: [
                [1.0, 3.0, 0.0, 0.0, 0.0],
                [0.0, 6.0, 7.0, 0.0, 0.0],
                [0.0, 0.0, 2.0, 1.0, 0.0],
                [0.0, 0.0, 0.0, 12.0, 3.0],
                [0.0, 0.0, 0.0, 0.0, -1.0]
            ],
            x: [1.0, -101.0, 2.0, -201.0, 3.0, -301.0, 4.0, -401.0, 5.0, -501.0, -601.0, -701.0],
            incX: 2,
            ans: [2.479166666666667, -101.0, -0.493055555555556, -201.0, 0.708333333333333, -301.0, 1.583333333333333, -401.0, -5.000000000000000, -501.0, -601.0, -701.0]
        ),
        dtbsvTestStruct(
            ul: Upper,
            tA: NoTrans,
            d: NonUnitDiag,
            n: 5,
            k: 2,
            a: [
                [1.0, 3.0, 5.0, 0.0, 0.0],
                [0.0, 6.0, 7.0, 5.0, 0.0],
                [0.0, 0.0, 2.0, 1.0, 5.0],
                [0.0, 0.0, 0.0, 12.0, 3.0],
                [0.0, 0.0, 0.0, 0.0, -1.0]
            ],
            x: [1.0, -101.0, 2.0, -201.0, 3.0, -301.0, 4.0, -401.0, 5.0, -501.0, -601.0, -701.0],
            incX: 2,
            ans: [-15.854166666666664, -101.0, -16.395833333333336, -201.0, 13.208333333333334, -301.0, 1.583333333333333, -401.0, -5.000000000000000, -501.0, -601.0, -701.0]
        ),
        dtbsvTestStruct(
            ul: Lower,
            tA: NoTrans,
            d: NonUnitDiag,
            n: 5,
            k: 2,
            a: [
                [1.0, 0.0, 0.0, 0.0, 0.0],
                [3.0, 6.0, 0.0, 0.0, 0.0],
                [5.0, 7.0, 2.0, 0.0, 0.0],
                [0.0, 5.0, 1.0, 12.0, 0.0],
                [0.0, 0.0, 5.0, 3.0, -1.0]
            ],
            x: [1.0, 2.0, 3.0, 4.0, 5.0],
            incX: 1,
            ans: [1.0, -0.166666666666667, -0.416666666666667, 0.437500000000000, -5.770833333333334]
        ),
        dtbsvTestStruct(
            ul: Lower,
            tA: NoTrans,
            d: NonUnitDiag,
            n: 5,
            k: 2,
            a: [
                [1.0, 0.0, 0.0, 0.0, 0.0],
                [3.0, 6.0, 0.0, 0.0, 0.0],
                [5.0, 7.0, 2.0, 0.0, 0.0],
                [0.0, 5.0, 1.0, 12.0, 0.0],
                [0.0, 0.0, 5.0, 3.0, -1.0]
            ],
            x: [1.0, -101.0, 2.0, -201.0, 3.0, -301.0, 4.0, -401.0, 5.0, -501.0, -601.0, -701.0],
            incX: 2,
            ans: [1.0, -101.0, -0.166666666666667, -201.0, -0.416666666666667, -301.0, 0.437500000000000, -401.0, -5.770833333333334, -501.0, -601.0, -701.0]
        ),
        dtbsvTestStruct(
            ul: Upper,
            tA: Trans,
            d: NonUnitDiag,
            n: 5,
            k: 2,
            a: [
                [1.0, 3.0, 5.0, 0.0, 0.0],
                [0.0, 6.0, 7.0, 5.0, 0.0],
                [0.0, 0.0, 2.0, 1.0, 5.0],
                [0.0, 0.0, 0.0, 12.0, 3.0],
                [0.0, 0.0, 0.0, 0.0, -1.0]
            ],
            x: [1.0, 2.0, 3.0, 4.0, 5.0],
            incX: 1,
            ans: [1.0, -0.166666666666667, -0.416666666666667, 0.437500000000000, -5.770833333333334]
        ),
        dtbsvTestStruct(
            ul: Upper,
            tA: Trans,
            d: NonUnitDiag,
            n: 5,
            k: 2,
            a: [
                [1.0, 3.0, 5.0, 0.0, 0.0],
                [0.0, 6.0, 7.0, 5.0, 0.0],
                [0.0, 0.0, 2.0, 1.0, 5.0],
                [0.0, 0.0, 0.0, 12.0, 3.0],
                [0.0, 0.0, 0.0, 0.0, -1.0]
            ],
            x: [1.0, -101.0, 2.0, -201.0, 3.0, -301.0, 4.0, -401.0, 5.0, -501.0, -601.0, -701.0],
            incX: 2,
            ans: [1.0, -101.0, -0.166666666666667, -201.0, -0.416666666666667, -301.0, 0.437500000000000, -401.0, -5.770833333333334, -501.0, -601.0, -701.0]
        ),
        dtbsvTestStruct(
            ul: Lower,
            tA: Trans,
            d: NonUnitDiag,
            n: 5,
            k: 2,
            a: [
                [1.0, 0.0, 0.0, 0.0, 0.0],
                [3.0, 6.0, 0.0, 0.0, 0.0],
                [5.0, 7.0, 2.0, 0.0, 0.0],
                [0.0, 5.0, 1.0, 12.0, 0.0],
                [0.0, 0.0, 5.0, 3.0, -1.0]
            ],
            x: [1.0, 2.0, 3.0, 4.0, 5.0],
            incX: 1,
            ans: [-15.854166666666664, -16.395833333333336, 13.208333333333334, 1.583333333333333, -5.000000000000000]
        ),
        dtbsvTestStruct(
            ul: Lower,
            tA: Trans,
            d: NonUnitDiag,
            n: 5,
            k: 2,
            a: [
                [1.0, 0.0, 0.0, 0.0, 0.0],
                [3.0, 6.0, 0.0, 0.0, 0.0],
                [5.0, 7.0, 2.0, 0.0, 0.0],
                [0.0, 5.0, 1.0, 12.0, 0.0],
                [0.0, 0.0, 5.0, 3.0, -1.0]
            ],
            x: [1.0, -101.0, 2.0, -201.0, 3.0, -301.0, 4.0, -401.0, 5.0, -501.0, -601.0, -701.0],
            incX: 2,
            ans: [-15.854166666666664, -101.0, -16.395833333333336, -201.0, 13.208333333333334, -301.0, 1.583333333333333, -401.0, -5.000000000000000, -501.0, -601.0, -701.0]
        )
    ]

    for (i in 0..tests.size) {
        let aFlat = if (tests[i].ul == Upper) {
            flattenBanded(tests[i].a, tests[i].k, 0)
        } else {
            flattenBanded(tests[i].a, 0, tests[i].k)
        }
        let xCopy = sliceCopy(tests[i].x)
        nFloat64.dtbsv(tests[i].ul, tests[i].tA, tests[i].d, tests[i].n, tests[i].k, aFlat, tests[i].k + 1, xCopy, tests[i].incX)
        if (!dSliceTolEqual(tests[i].ans, xCopy)) {
            throw Exception("Case ${i}: Want ${tests[i].ans}, got ${xCopy}")
        }
    }
    return true
}