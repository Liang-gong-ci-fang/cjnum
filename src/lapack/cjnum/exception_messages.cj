package cjnum.lapack.cjnum

let badApplyOrtho       = "lapack: bad ApplyOrtho"
let badBalanceJob       = "lapack: bad BalanceJob"
let badDiag             = "lapack: bad Diag"
let badDirect           = "lapack: bad Direct"
let badEVComp           = "lapack: bad EVComp"
let badEVHowMany        = "lapack: bad EVHowMany"
let badEVJob            = "lapack: bad EVJob"
let badEVSide           = "lapack: bad EVSide"
let badGSVDJob          = "lapack: bad GSVDJob"
let badGenOrtho         = "lapack: bad GenOrtho"
let badLeftEVJob        = "lapack: bad LeftEVJob"
let badMatrixType       = "lapack: bad MatrixType"
let badMaximizeNormXJob = "lapack: bad MaximizeNormXJob"
let badNorm             = "lapack: bad Norm"
let badOrthoComp        = "lapack: bad OrthoComp"
let badPivot            = "lapack: bad Pivot"
let badRightEVJob       = "lapack: bad RightEVJob"
let badSVDJob           = "lapack: bad SVDJob"
let badSchurComp        = "lapack: bad SchurComp"
let badSchurJob         = "lapack: bad SchurJob"
let badSide             = "lapack: bad Side"
let badSort             = "lapack: bad Sort"
let badStoreV           = "lapack: bad StoreV"
let badTrans            = "lapack: bad Trans"
let badUpdateSchurComp  = "lapack: bad UpdateSchurComp"
let badUplo             = "lapack: bad Uplo"
let bothSVDOver         = "lapack: both jobU and jobVT are lapack.SVDOverwrite"

let badIfst     = "lapack: ifst out of range"
let badIhi      = "lapack: ihi out of range"
let badIhiz     = "lapack: ihiz out of range"
let badIlo      = "lapack: ilo out of range"
let badIloz     = "lapack: iloz out of range"
let badIlst     = "lapack: ilst out of range"
let badIsave    = "lapack: bad isave value"
let badIspec    = "lapack: bad ispec value"
let badJ1       = "lapack: j1 out of range"
let badJpvt     = "lapack: bad element of jpvt"
let badK1       = "lapack: k1 out of range"
let badK2       = "lapack: k2 out of range"
let badKacc22   = "lapack: invalid value of kacc22"
let badKbot     = "lapack: kbot out of range"
let badKtop     = "lapack: ktop out of range"
let badLWork    = "lapack: insufficient declared workspace length"
let badMm       = "lapack: mm out of range"
let badN1       = "lapack: bad value of n1"
let badN2       = "lapack: bad value of n2"
let badNa       = "lapack: bad value of na"
let badName     = "lapack: bad name"
let badNh       = "lapack: bad value of nh"
let badNw       = "lapack: bad value of nw"
let badPp       = "lapack: bad value of pp"
let badShifts   = "lapack: bad shifts"
let i0LT0       = "lapack: i0 < 0"
let kGTM        = "lapack: k > m"
let kGTN        = "lapack: k > n"
let kLT0        = "lapack: k < 0"
let kLT1        = "lapack: k < 1"
let kdLT0       = "lapack: kd < 0"
let klLT0       = "lapack: kl < 0"
let kuLT0       = "lapack: ku < 0"
let mGTN        = "lapack: m > n"
let mLT0        = "lapack: m < 0"
let mmLT0       = "lapack: mm < 0"
let n0LT0       = "lapack: n0 < 0"
let nGTM        = "lapack: n > m"
let nLT0        = "lapack: n < 0"
let nLT1        = "lapack: n < 1"
let nLTM        = "lapack: n < m"
let nanCFrom    = "lapack: cfrom is NaN"
let nanCTo      = "lapack: cto is NaN"
let nbGTM       = "lapack: nb > m"
let nbGTN       = "lapack: nb > n"
let nbLT0       = "lapack: nb < 0"
let nccLT0      = "lapack: ncc < 0"
let ncvtLT0     = "lapack: ncvt < 0"
let negANorm    = "lapack: anorm < 0"
let negZ        = "lapack: negative z value"
let nhLT0       = "lapack: nh < 0"
let notIsolated = "lapack: block is not isolated"
let nrhsLT0     = "lapack: nrhs < 0"
let nruLT0      = "lapack: nru < 0"
let nshftsLT0   = "lapack: nshfts < 0"
let nshftsOdd   = "lapack: nshfts must be even"
let nvLT0       = "lapack: nv < 0"
let offsetGTM   = "lapack: offset > m"
let offsetLT0   = "lapack: offset < 0"
let pLT0        = "lapack: p < 0"
let recurLT0    = "lapack: recur < 0"
let zeroCFrom   = "lapack: zero cfrom"

let badLenAlpha    = "lapack: bad length of alpha"
let badLenBeta     = "lapack: bad length of beta"
let badLenIpiv     = "lapack: bad length of ipiv"
let badLenJpiv     = "lapack: bad length of jpiv"
let badLenJpvt     = "lapack: bad length of jpvt"
let badLenK        = "lapack: bad length of k"
let badLenPiv      = "lapack: bad length of piv"
let badLenSelected = "lapack: bad length of selected"
let badLenSi       = "lapack: bad length of si"
let badLenSr       = "lapack: bad length of sr"
let badLenTau      = "lapack: bad length of tau"
let badLenWi       = "lapack: bad length of wi"
let badLenWr       = "lapack: bad length of wr"

let shortA     = "lapack: insufficient length of a"
let shortAB    = "lapack: insufficient length of ab"
let shortAuxv  = "lapack: insufficient length of auxv"
let shortB     = "lapack: insufficient length of b"
let shortC     = "lapack: insufficient length of c"
let shortCNorm = "lapack: insufficient length of cnorm"
let shortD     = "lapack: insufficient length of d"
let shortDL    = "lapack: insufficient length of dl"
let shortDU    = "lapack: insufficient length of du"
let shortE     = "lapack: insufficient length of e"
let shortF     = "lapack: insufficient length of f"
let shortH     = "lapack: insufficient length of h"
let shortIWork = "lapack: insufficient length of iwork"
let shortIsgn  = "lapack: insufficient length of isgn"
let shortQ     = "lapack: insufficient length of q"
let shortRHS   = "lapack: insufficient length of rhs"
let shortS     = "lapack: insufficient length of s"
let shortScale = "lapack: insufficient length of scale"
let shortT     = "lapack: insufficient length of t"
let shortTau   = "lapack: insufficient length of tau"
let shortTauP  = "lapack: insufficient length of tauP"
let shortTauQ  = "lapack: insufficient length of tauQ"
let shortU     = "lapack: insufficient length of u"
let shortV     = "lapack: insufficient length of v"
let shortVL    = "lapack: insufficient length of vl"
let shortVR    = "lapack: insufficient length of vr"
let shortVT    = "lapack: insufficient length of vt"
let shortVn1   = "lapack: insufficient length of vn1"
let shortVn2   = "lapack: insufficient length of vn2"
let shortW     = "lapack: insufficient length of w"
let shortWH    = "lapack: insufficient length of wh"
let shortWV    = "lapack: insufficient length of wv"
let shortWi    = "lapack: insufficient length of wi"
let shortWork  = "lapack: insufficient length of work"
let shortWr    = "lapack: insufficient length of wr"
let shortX     = "lapack: insufficient length of x"
let shortY     = "lapack: insufficient length of y"
let shortZ     = "lapack: insufficient length of z"

let badLdA    = "lapack: bad leading dimension of A"
let badLdB    = "lapack: bad leading dimension of B"
let badLdC    = "lapack: bad leading dimension of C"
let badLdF    = "lapack: bad leading dimension of F"
let badLdH    = "lapack: bad leading dimension of H"
let badLdQ    = "lapack: bad leading dimension of Q"
let badLdT    = "lapack: bad leading dimension of T"
let badLdU    = "lapack: bad leading dimension of U"
let badLdV    = "lapack: bad leading dimension of V"
let badLdVL   = "lapack: bad leading dimension of VL"
let badLdVR   = "lapack: bad leading dimension of VR"
let badLdVT   = "lapack: bad leading dimension of VT"
let badLdW    = "lapack: bad leading dimension of W"
let badLdWH   = "lapack: bad leading dimension of WH"
let badLdWV   = "lapack: bad leading dimension of WV"
let badLdWork = "lapack: bad leading dimension of Work"
let badLdX    = "lapack: bad leading dimension of X"
let badLdY    = "lapack: bad leading dimension of Y"
let badLdZ    = "lapack: bad leading dimension of Z"

let absIncNotOne = "lapack: increment not one or negative one"
let badIncX      = "lapack: incX <= 0"
let badIncY      = "lapack: incY <= 0"
let zeroIncV     = "lapack: incv == 0"

